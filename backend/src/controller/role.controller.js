import Role from '../model/role.model.js';
import Permission from '../model/permission.model.js';

// ‚úÖ Create Role
export const createRole = async (req, res) => {
  try {
    console.log('üì• Incoming Role Create Request:', req.body);

    const { name, permissionIds } = req.body;

    if (!name) {
      console.warn('‚ö†Ô∏è Missing role name!');
      return res.status(400).json({ message: 'Role name is required' });
    }

    // üîç Check if role already exists
    const existing = await Role.findOne({ where: { name } });
    if (existing) {
      console.warn('‚ö†Ô∏è Role already exists:', name);
      return res.status(409).json({ message: 'Role already exists' });
    }

    let permissions = [];

    // ‚úÖ Validate permission IDs
    if (Array.isArray(permissionIds) && permissionIds.length > 0) {
      console.log('üîó Validating permission IDs:', permissionIds);

      const validIds = permissionIds.map((id) => Number(id));
      permissions = await Permission.findAll({ where: { id: validIds } });

      console.log('‚úÖ Found Permissions:', permissions.map((p) => p.id));

      if (permissions.length !== validIds.length) {
        console.error('‚ùå Some permission IDs not found in DB');
        return res.status(400).json({
          message: 'Some permissions not found. Role was not created.',
        });
      }
    }

    // ‚úÖ Create Role
    const role = await Role.create({ name });
    console.log('üü¢ Role Created:', role.id, role.name);

    // ‚úÖ Link Permissions (if any)
    if (permissions.length > 0) {
      await role.setPermissions(permissions);
      console.log(`üîó Linked ${permissions.length} permissions to role #${role.id}`);
    }

    return res.status(201).json({
      message: 'Role created successfully',
      role,
    });
  } catch (error) {
    console.error('‚ùå Create Role Error:', error);
    return res.status(500).json({ message: 'Failed to create role', error: error.message });
  }
};

// ‚úÖ Get All Roles
export const getAllRoles = async (req, res) => {
  try {
    console.log('üì° Fetching all roles...');
    const roles = await Role.findAll({
      include: [
        {
          model: Permission,
          as: 'permissions',
          through: { attributes: [] },
        },
      ],
    });

    console.log(`‚úÖ Fetched ${roles.length} roles`);
    res.status(200).json(roles);
  } catch (error) {
    console.error('‚ùå Error fetching roles:', error.message);
    res.status(500).json({ message: 'Failed to fetch roles', error: error.message });
  }
};

// ‚úÖ Update Role + Permissions
export const updateRole = async (req, res) => {
  try {
    console.log('üü° Update Role Request:', req.params, req.body);

    const { id } = req.params;
    const { name, permissionIds } = req.body;

    if (!name) {
      return res.status(400).json({ message: 'Updated role name is required' });
    }

    // üîç Find role by ID
    const role = await Role.findByPk(id, {
      include: [{ model: Permission, as: 'permissions' }],
    });

    if (!role) {
      console.warn('‚ö†Ô∏è Role not found for ID:', id);
      return res.status(404).json({ message: 'Role not found' });
    }

    // ‚úèÔ∏è Update role name
    role.name = name;
    await role.save();
    console.log(`‚úÖ Role name updated to '${name}'`);

    // üîÅ Update permissions (if provided)
    if (Array.isArray(permissionIds)) {
      console.log('üîó Updating permissions for role:', permissionIds);

      const permissions = await Permission.findAll({
        where: { id: permissionIds },
      });

      // Replace existing permissions with new ones
      await role.setPermissions(permissions);
      console.log(`‚úÖ Role #${id} permissions updated successfully`);
    }

    // üîô Return updated role with permissions
    const updatedRole = await Role.findByPk(id, {
      include: [{ model: Permission, as: 'permissions' }],
    });

    return res.status(200).json({
      message: 'Role and permissions updated successfully',
      role: updatedRole,
    });
  } catch (error) {
    console.error('‚ùå Error updating role:', error);
    res.status(500).json({
      message: 'Failed to update role',
      error: error.message,
    });
  }
};


// ‚úÖ Delete Role
export const deleteRole = async (req, res) => {
  try {
    console.log('üî¥ Delete Role Request:', req.params);
    const { id } = req.params;

    const role = await Role.findByPk(id);
    if (!role) {
      console.warn('‚ö†Ô∏è Role not found for ID:', id);
      return res.status(404).json({ message: 'Role not found' });
    }

    await role.destroy();
    console.log('üóëÔ∏è Role deleted:', id);

    res.status(200).json({ message: 'Role deleted successfully' });
  } catch (error) {
    console.error('‚ùå Error deleting role:', error.message);
    res.status(500).json({ message: 'Failed to delete role', error: error.message });
  }
};
export const getRoleById = async (req, res) => {
  try {
    const roleId = req.params.id;
    const role = await Role.findByPk(roleId, {
      include: ['permissions'], // ‚úÖ or adjust based on your ORM
    });

    if (!role) {
      return res.status(404).json({ message: 'Role not found' });
    }

    res.status(200).json(role);
  } catch (error) {
    console.error('‚ùå Error fetching role by ID:', error);
    res.status(500).json({ message: 'Server error' });
  }
};
